#!/usr/bin/env groovy

def bob = "./bob/bob"

def LOCKABLE_RESOURCE_LABEL = "bob-ci-patch-lcm"

def SLAVE_NODE = null
def LATEST_CBO_PRA_VERSION
def SELDON_NEEDS_UPDATE
def KANIKO_NEEDS_UPDATE

def MAIL_TO='d386f28a.ericsson.onmicrosoft.com@emea.teams.ms, PDLMMECIMM@pdl.internal.ericsson.com'

node(label: 'docker') {
    stage('Nominating build node') {
        SLAVE_NODE = "${NODE_NAME}"
        echo "Executing build on ${SLAVE_NODE}"
    }
}

pipeline {
    agent {
        node {
            label "${SLAVE_NODE}"
        }
    }

    options {
        timestamps()
        buildDiscarder(logRotator(numToKeepStr: '50', artifactNumToKeepStr: '50'))
    }

    environment {
        GIT_AUTHOR_NAME = "mxecifunc"
        GIT_AUTHOR_EMAIL = "PDLMMECIMM@pdl.internal.ericsson.com"
        GIT_COMMITTER_NAME = "${USER}"
        GIT_COMMITTER_EMAIL = "${GIT_AUTHOR_EMAIL}"
        GIT_SSH_COMMAND = "ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o GSSAPIAuthentication=no -o PubKeyAuthentication=yes"
        GERRIT_CREDENTIALS_ID = 'gerrit-http-password-mxecifunc'
        UPDATE_SELDON = 'true'
        UPDATE_KANIKO = 'false'
    }

    // Stage names (with descriptions) taken from ADP Microservice CI Pipeline Step Naming Guideline: https://confluence.lmera.ericsson.se/pages/viewpage.action?pageId=122564754
    stages {
        stage('Submodule Init'){
            steps{
                sshagent(credentials: ['ssh-key-mxecifunc']) {
                    sh 'git clean -xdff'
                    sh 'git submodule sync'
                    sh 'git submodule update --init --recursive'
                }
            }
        }

        stage('Clean') {
            steps {
                script{
                    sh "${bob} clean"
                }
            }
        }

        stage('Init') {
            steps {
                sh "${bob} init"
            }
        }

        stage('Fetch latest CBO Version') {
            environment{
                API_TOKEN = credentials('arm-api-token-mxecifunc')
            }
            steps {
                 withCredentials([
                    zip(credentialsId: 'arm-docker-conf-mxecifunc', variable: 'DOCKER_CONFIG'),
                ]){
                    sh "${bob} cbo-version-lookup"
                    script{
                        LATEST_CBO_PRA_VERSION = readFile('.bob/var.latest-cbo-pra-version').trim() 
                    }
                }
            }
        }

        stage('Update CBO Version'){
            parallel{
                stage('seldon-core-build') {
                    when {
                        expression { env.UPDATE_SELDON == "true" }
                    }
                    steps {
                        withCredentials([usernamePassword(credentialsId: 'gerrit-http-password-mxecifunc', usernameVariable: 'GERRIT_USERNAME', passwordVariable: 'GERRIT_PASSWORD')]) {
                            sshagent(credentials: ['ssh-key-mxecifunc']) {
                                sh "${bob} update-seldon-build"
                            }
                        }
                    }
                    post{
                        always {
                            script {
                                SELDON_NEEDS_UPDATE=readFile('.bob/var.seldon-needs-update').trim() 
                            }
                        }
                        success{
                            script {
                                if (SELDON_NEEDS_UPDATE == "true") {
                                    currentBuild.displayName = currentBuild.displayName + ' / ' + LATEST_CBO_PRA_VERSION

                                    mail to : MAIL_TO,
                                    subject : "[model-lcm-seldon] CBO PRA Version Updated Successfully",
                                    body : "CBO PRA Version Updated to ${LATEST_CBO_PRA_VERSION}" +
                                            "<b>Refer:</b> ${env.BUILD_URL} <br><br>" +
                                            "<b>Note:</b> This mail was automatically sent as part of ${env.JOB_NAME} jenkins job.",
                                    mimeType: 'text/html'
                                }else{
                                    echo '[model-lcm-seldon] Already latest CBOS version is used.'
                                    currentBuild.displayName = currentBuild.displayName + ' / ' + LATEST_CBO_PRA_VERSION
                                }
                            }
                        }
                        failure{
                            script {
                                if (SELDON_NEEDS_UPDATE == "true") {  
                                    mail to : MAIL_TO,
                                    subject : "[model-lcm-seldon] CBO PRA Version Updated Failed",
                                    body : "CBO PRA Version Update to ${LATEST_CBO_PRA_VERSION}" +
                                            "<b>Refer:</b> ${env.BUILD_URL} <br><br>" +
                                            "<b>Note:</b> This mail was automatically sent as part of ${env.JOB_NAME} jenkins job.",
                                    mimeType: 'text/html'
                                }
                            }
                        }
                    }
                }

                stage('kaniko-build') {
                    when {
                        expression { env.UPDATE_KANIKO == "true" }
                    }
                    steps {
                        withCredentials([usernamePassword(credentialsId: 'gerrit-http-password-mxecifunc', usernameVariable: 'GERRIT_USERNAME', passwordVariable: 'GERRIT_PASSWORD')]) {
                           sshagent(credentials: ['ssh-key-mxecifunc']) {
                                sh "${bob} update-kaniko-build"
                            }
                        }
                    }
                    post{
                        always {
                            script {
                                KANIKO_NEEDS_UPDATE=readFile('.bob/var.kaniko-needs-update').trim() 
                            }
                        }
                        success{
                            script {
                                if (KANIKO_NEEDS_UPDATE == "true") {
                                    currentBuild.displayName = currentBuild.displayName + ' / ' + LATEST_CBO_PRA_VERSION

                                    mail to : MAIL_TO,
                                    subject : "[model-lcm-packager] CBO PRA Version Updated Successfully",
                                    body : "CBO PRA Version Updated to ${LATEST_CBO_PRA_VERSION}" +
                                            "<b>Refer:</b> ${env.BUILD_URL} <br><br>" +
                                            "<b>Note:</b> This mail was automatically sent as part of ${env.JOB_NAME} jenkins job.",
                                    mimeType: 'text/html'
                                }else{
                                    echo '[model-lcm-packager] Already latest CBOS version is used.'
                                    currentBuild.displayName = currentBuild.displayName + ' / ' + LATEST_CBO_PRA_VERSION
                                }
                            }
                        }
                        failure{
                            script {
                                if (KANIKO_NEEDS_UPDATE == "true") {  
                                    mail to : MAIL_TO,
                                    subject : "[model-lcm-packager] CBO PRA Version Updated Failed",
                                    body : "CBO PRA Version Update to ${LATEST_CBO_PRA_VERSION} failed" +
                                            "<b>Refer:</b> ${env.BUILD_URL} <br><br>" +
                                            "<b>Note:</b> This mail was automatically sent as part of ${env.JOB_NAME} jenkins job.",
                                    mimeType: 'text/html'
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    post {
        success {
            script {
                cleanWs()
            }
        }
    }
}